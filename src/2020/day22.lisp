(defpackage :aoc/2020/22 #.cl-user::*aoc-use*)
(in-package :aoc/2020/22)

(defun parse-decks (data)
  (let (groups current)
    (dolist (string (append data '("")))
      (if (string= string "")
        (setf groups (cons (reverse current) groups) current nil)
        (setf current (cons string current))))
    (list
      (mapcar #'parse-integer (rest (second groups)))
      (mapcar #'parse-integer (rest (first groups))))))

(defun play (decks)
  (loop with deck1 = (first decks) and deck2 = (second decks)
        while (and deck1 deck2)
        for c1 = (pop deck1) and c2 = (pop deck2)
        if (> c1 c2) do (setf deck1 (append deck1 (list c1 c2)))
        else do (setf deck2 (append deck2 (list c2 c1)))
        finally (return (values deck1 deck2))))

(defun play-recursive (decks)
  (labels ((already-seen-p (seen deck1 deck2)
             (gethash (list deck1 deck2) seen))
           (mark-as-seen (seen deck1 deck2)
             (setf (gethash (list deck1 deck2) seen) t))
           (player1-wins-turn-p (c1 deck1 c2 deck2)
             (if (or (< (length deck1) c1) (< (length deck2) c2))
               (> c1 c2)
               (recur (subseq deck1 0 c1) (subseq deck2 0 c2))))
           (recur (deck1 deck2)
             (loop with seen = (make-hash-table :test 'equal)
                   while (and deck1 deck2)
                   if (already-seen-p seen deck1 deck2) return deck1 else do
                   (mark-as-seen seen deck1 deck2)
                   (let ((c1 (pop deck1)) (c2 (pop deck2)))
                     (if (player1-wins-turn-p c1 deck1 c2 deck2)
                       (setf deck1 (append deck1 (list c1 c2)))
                       (setf deck2 (append deck2 (list c2 c1)))))
                   finally (return (values deck1 deck2)))))
    (recur (first decks) (second decks))))

(defun score (deck)
  (reduce #'+ (mapcar #'* (reverse deck) (iota (length deck) :start 1))))

(define-solution (2020 22) (decks parse-decks)
  (flet ((winner-score (deck1 deck2)
           (score (or deck1 deck2))))
    (values (multiple-value-call #'winner-score (play decks))
            (multiple-value-call #'winner-score (play-recursive decks)))))

(define-test (2020 21) (33772 35070))
