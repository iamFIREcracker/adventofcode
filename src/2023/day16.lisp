(defpackage :aoc/2023/16 #.cl-user::*aoc-use*)
(in-package :aoc/2023/16)


(defun parse-grid (&optional (strings (uiop:read-file-lines #P"src/2023/day16.txt")))
  (bnd* ((rows (length strings))
         (cols (length (first strings)))
         (map (make-hash-table :test 'equal)))
    (doseq ((i s) (enumerate strings))
      (doseq ((j ch) (enumerate s))
        (setf (gethash (list i j) map) ch)))
    (list map rows cols)))
#+#:excluded (parse-grid)

(defun move-straight (pos dir) (mapcar #'+ pos dir))
(defun rotate-cw (dir) (list (second dir) (- (first dir))))
(defun rotate-ccw (dir) (list (- (second dir)) (first dir)))

(defun total-energy (energized) (count-if #'plusp (hash-table-values energized)))

(defmacro unless-already-seen ((ht &rest key-parts) &body body)
  (with-gensyms (memo key)
    `(let ((,memo ,ht)
           (,key (list ,@key-parts)))
       (unless (gethash ,key ,memo)
         (setf (gethash ,key ,memo) t)
         (block unless-already-seen
                ,@body)))))

(defun radiate (start dir &optional (map (first (parse-grid))))
  (bnd* ((energized (make-hash-table :test 'equal))
         (seen (make-hash-table :test 'equal)))
    (labels ((dfs (pos dir &aux (ch (gethash pos map)))
               (if (not ch) (return-from dfs))
               (unless-already-seen (seen pos dir)
                 (if (> (gethash pos energized 0) 1000)
                   (return-from dfs))
                 (incf (gethash pos energized 0))
                 (cond ((char= ch #\.) (dfs (move-straight dir pos) dir))
                       ((char= ch #\\) (bnd1 (dir (if (zerop (first dir))
                                                    (rotate-cw dir)
                                                    (rotate-ccw dir)))
                                         (dfs (move-straight pos dir) dir)))
                       ((char= ch #\/) (bnd1 (dir (if (zerop (first dir))
                                                    (rotate-ccw dir)
                                                    (rotate-cw dir)))
                                         (dfs (move-straight pos dir) dir)))
                       ((and (char= ch #\|) (zerop (second dir)))
                        (dfs (move-straight dir pos) dir))
                       ((char= ch #\|) (bnd1 (dir (rotate-cw dir))
                                         (dfs (move-straight pos dir) dir))
                                       (bnd1 (dir (rotate-ccw dir))
                                         (dfs (move-straight pos dir) dir)))
                       ((and (char= ch #\-) (zerop (first dir)))
                        (dfs (move-straight dir pos) dir))
                       ((char= ch #\-) (bnd1 (dir (rotate-cw dir))
                                         (dfs (move-straight pos dir) dir))
                                       (bnd1 (dir (rotate-ccw dir))
                                         (dfs (move-straight pos dir) dir)))
                       (t (error 'wtf))))))
      (dfs start dir)
      (total-energy energized))))
#+#:excluded (radiate  (list 0 0) (list 0 1))
; 8249

(defun part2 (&optional (input (parse-grid))
                        &aux (map (first input))
                        (rows (second input))
                        (cols (third input)))
  (looping
    (dorange (j 0 cols)
      (maximize! (radiate (list 0 j) (list 1 0)))
      (maximize! (radiate (list (1- rows) j) (list -1 0))))
    (dorange (i 0 rows)
      (maximize! (radiate (list i 0) (list 0 1)))
      (maximize! (radiate (list i (1- cols)) (list 0 -1))))))

#+#:excluded (part2)
; 8444
