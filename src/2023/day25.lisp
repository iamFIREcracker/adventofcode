(defpackage :aoc/2023/25 #.cl-user::*aoc-use*)
(in-package :aoc/2023/25)


(defun parse-connections (&optional (strings (uiop:read-file-lines #P"src/2023/day25.txt")))
  (bnd1 (adj (make-hash-table))
    (dolist (s strings)
      (destructuring-bind (a . rest) (mapcar #'as-keyword (cl-ppcre:all-matches-as-strings "\\w+" s))
        (dolist (b rest)
          (push b (gethash a adj))
          (push a (gethash b adj)))))
    adj))
#+#:excluded (parse-connections)

(defun edges (adj)
  (looping
    (dohash (a connected adj)
      (dolist (b connected)
        (collect! (cons a b))))))
#+#:excluded (length (edges (parse-connections)))


(defun karger-min-cut (adj)
  (setf adj (copy-hash-table adj))
  (bnd1 (contracted-into)
    (labels ((contract (a b)
               (dolist (c (gethash b adj))
                 (removef (gethash c adj) b)
                 (unless (eq c a)
                   (push c (gethash a adj))
                   ;; TODO what if c was already linked to a?
                   (push a (gethash c adj))))
               (remhash b adj)
               (setf  (getf contracted-into a) (append (getf contracted-into a)
                                                       (list b)
                                                       (getf contracted-into b))) ))
      (while (> (hash-table-count adj) 2)
        (bnd* (((a . b) (random-elt (edges adj))))
          (contract a b))))
    (destructuring-bind (a b) (hash-table-keys adj)
      (values (cons a (getf contracted-into a))
              (cons b (getf contracted-into b))
              (length (gethash a adj))))))
(defun karger-min-cut (adj)
  (setf adj (copy-hash-table adj))
  (bnd1 (contracted-into)
    (labels ((contract (a b)
               (dolist (c (gethash b adj))
                 (removef (gethash c adj) b)
                 (unless (eq c a)
                   (push c (gethash a adj))
                   ;; TODO what if c was already linked to a?
                   (push a (gethash c adj))))
               (remhash b adj)
               (setf  (getf contracted-into a) (append (getf contracted-into a)
                                                       (list b)
                                                       (getf contracted-into b))) ))
      (while (> (hash-table-count adj) 2)
        ;; is the below truly uniform?!
        (bnd* ((a (random-elt (hash-table-keys adj)))
               (b (random-elt (gethash a adj))))
          (contract a b))))
    (destructuring-bind (a b) (hash-table-keys adj)
      (values (cons a (getf contracted-into a))
              (cons b (getf contracted-into b))
              (length (gethash a adj))))))
#+#:excluded (bnd1 (adj (parse-connections))
               (while t
                 (multiple-value-bind (l r cut) (karger-min-cut adj)
                   (when (= cut 3)
                     (pr (* (length l) (length r)))
                     (assert nil)))))
; 544523
