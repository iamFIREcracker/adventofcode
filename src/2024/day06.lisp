(defpackage :aoc/2024/06 #.cl-user::*aoc-use*)
(in-package :aoc/2024/06)

(defun parse-input (&optional (strings (uiop:read-file-lines #P"src/2024/day06.txt")))
  (let ((map (make-hash-table :test 'equal))
        start)
    (doseq ((i s) (enumerate strings))
      (doseq ((j ch) (enumerate s))
        (let1 coord (list i j)
          (setf (gethash coord map) ch)
          (if (char= ch #\^)
              (setf start coord)))))
    (list map start (list -1 0))))
#+#:excluded (parse-input)


(defun move-straight (dir pos) (mapcar #'+ pos dir))
(defun rotate-cw (dir) (list (second dir) (- (first dir))))
#+#:excluded (defun rotate-ccw (dir) (list (- (second dir)) (first dir)))

(defun guard-path (map pos dir &optional (loop-error-p t))
  (let ((seen (make-hash-table :test 'equal))
        path)
    (while (gethash pos map)
      (if (gethash (list pos dir) seen)
          (if loop-error-p
              (error "Loop detected!")
              (return-from guard-path nil))
          (setf (gethash (list pos dir) seen) t))
      (push pos path)
      (while (eql (gethash (move-straight dir pos) map) #\#)
        (setf dir (rotate-cw dir)))
      (setf pos (move-straight dir pos)))
    (reverse path)))


(define-solution (2024 06) (input parse-input)
  (destructuring-bind (map start dir) input
    (let1 path (guard-path map start dir)
      (values (length (remove-duplicates path :test #'equal))
              (let1 obstructions (make-hash-table :test 'equal)
                (dolist (pos1 path)
                  (unless (equal pos1 start)
                    (assert (char= (gethash pos1 map) #\.))
                    (unless (gethash pos1 obstructions)
                      (setf (gethash pos1 map) #\#)
                      (if-not (guard-path map start dir nil)
                              (setf (gethash pos1 obstructions) t))
                      (setf (gethash pos1 map) #\.))))
                (hash-table-count obstructions))))))

(define-test (2024 06) (5331 1812))
